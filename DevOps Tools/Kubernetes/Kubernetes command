kubectl get -A IngressClass | grep nginx (Поиск Ingress класса)
kubectl delete IngressClass nginx (Удаление Ingress класса)
kubectl patch service nginx-ingress-controller-1636659940 \                 # 
-n nginx-ingress \                                                          # Команда для назначения внешнего ip (EXTERNAL-IP) адреса для ЛЮБОГО сервиса
-p '{"spec": {"type": "LoadBalancer", "externalIPs":["192.168.250.130"]}}'  # -n (namespace) , -p (patch)
kubectl delete all --all -n {namespace} (Удаляет все в ns без удаления ns)   (all относится ко всем типам ресурсов, таким как модули, развертывания, службы и т. Д. --all используется для удаления каждого объекта этого типа ресурса вместо указания его с использованием его имени или метки.)
kubectl label nodes/namespace имя ноды/пространства ключь=значение метки (создаем метки для узла чтобы можно было через нее указать что хотим разместить pod именно на узле с такой меткой)
kubectl get nodes --show-labels (что бы посмотреть метки на нодах, но можно и через describe)
kubectl describe pod/replicaset/deployment/node/... имя того, что хочешь посмотреть (после одного из четырех пишем имя, описание которого хотим посмотреть, покажет полное описание)
kubectl get pod/replicaset/deployment/node/... имя того, что хочешь посмотреть -o wide (покажет информацию о запущенных контейнерах с дополнительными полями ip и node) kubectl get pods -w (что бы посмотреть процессы с подами на ходу)
kubectl delete pod/deployment/replicaset/quota/all --all -n пространство имен (удалить все из указанного, если не указывать all и --all, то нужно указать отдельное имя того, что удаляем)
kubectl create -f имя ямл файла (создаст pod из ямл файла с конфигурацией) kubectl apply -f имя ямл файла (создаст обстракцию кубернетеса из ямл файла с конфигурацией или применить изменения из ямл файла на живую не удаляя) 
kubectl create configmap firebase-conf --from-file=firebase-notificator.json (создание конфигмапа из другого файла-конфигурации, так можно делать с любыми типами файлов)
kubectl replace -f имя ямл файла (эта команда применяется тогда, когда ты внутри файла изменил кол-во реплик и мы перечитываем ямл файл)
kubectl scale --replicas=кол-во -f имя файла (этой командой мы изменяем кол-во реплик в ямл файле не заходя в него)
kubectl get replicaset (посмотреть список созданных репликасет) kubectl get replicasets (посмотреть старый и новый набор реплик после обновления деплоймента) kubectl get deployments (чтобы посмотреть список созданных деплойментов)
kubectl delete replicaset/deployment/pod имя одного из них в ямл файле (удалит экземпляр одного из них, которые созданы)
kubectl get all (покажет все репликасет, деплойменты и поды) kubectl get secrets (покажет все секреты в кластере)
kubectl rollout status deployment/имя деплоймента (чтобы посмотреть состояние выкатки обновлений на ходу)
kubectl rollout restart deployment/имя деплоймента (передеплоить текущую версию)
kubectl rollout history deployment/имя деплоймента (для просмотра списка ревизий и истории изменений)
kubectl rollout undo deployment/имя деплоймента (что бы откатиться назад к старой версии, если что-то пошло не так в новой)
kubectl edit deploy имя деплоймента --record (откроет манифест с большим количеством параметров, которые не указывались ямл файле, из которого создан деплоймент, для глобальных изменений)
kubectl exec -it имя пода bash (зайдем в под с командной оболочкой bash)
kubectl get nodes (покажет ноды) kubectl top nodes (покажет ноды в ресурсами потребления)
kubectl get rolesbinding/role -n пространство (покажет имеющиеся роли или связки для пространства) kubectl get clusterrolebinding/clusterrole (выведет все кластерные связки в кластере или роли)
kubectl get quota -n название пространства имен (выведет все квоты в указанном пространстве)(через describe с указанием имени квоты и пространства можно посмотреть насколько занята квота)
kubectl get serviceaccount (покажет все сервис аккаунты в кластере)  kubectl get namespace (покажет все пространства имен в кластере)
kubectl logs имя пода -с имя контейнера как в манифесте (покажет логи всего контейнера) kubectl logs -f имя пода (покажет логи всего пода)
kubectl logs --tail=10 имя пода (выведет указанное кол-во строк лога с конца)  kubectl logs имя пода (покажет логи пода)
kubectl api-versions (покажет версии api в кластере) kubectl api-resources (покажет api ресурсов в кластере)
