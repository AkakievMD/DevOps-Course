1) udev - менеджер устройств используймый в OS Linux с ноябрь 2003 года, позволяет выполнять различные действия по отношению к устройствам подключенным к Linux OS.
Взаимодействия с устройствами происходит за счет написаных файлов правил с расширением name-dev.rules, чтобы написанное в файле правило было применено необходимо создать или переместить файл в директорию /etc/udev/rules.d/, после чего перезагрузить OS при необходимости.
Пример: SUBSYSTEM=="net", ATTR{address}=="00:0c:29:69:b3:eb", NAME="eth0"  (Переименовываем сетевой интерфейс), KERNEL=="sdb", RUN+="/usr/bin/my_script" (правило отрабатывает скрипт при подключении носителя)

2) sysfs — виртуальная файловая система в операционной системе Linux. Экспортирует в пространство пользователя информацию ядра Linux о присутствующих в системе устройствах и драйверах. Монтируется в директорию /sys

devices/
полностью соответствует внутреннему дереву устройств ядра, а символические ссылки в подкаталогах (когда они есть) указывают на шину устройства, принадлежность его к определённому классу, соответствующий загруженный драйвер. Дерево отражает связь между устройствами.

bus/ 
представляет собой перечень шин, зарегистрированных в ядре. Каталог каждой шины содержит подкаталоги devices/ и drivers/. devices/ — это символьные ссылки на каталоги всех устройств, описанных в системе (реально расположенных в /sys/devices/…).

drivers/
каталоги драйверов, загруженных для устройств, присутствующих на данной шине. Каждый такой каталог содержит, как минимум, пару файлов-атрибутов bind и unbind, предназначенных для управления драйвером, а когда драйвер обнаруживает «своё» устройство, то в каталоге появляется символьная ссылка на каталог этого устройства.

block/
содержит каталоги всех блочных устройств, присутствующих в настоящее время в системе. В данном случае под устройством понимается совокупность физического устройства и драйвера. То есть, если при подключении USB-драйва некоторое новое устройство в /sys/devices/ появится всегда (можно говорить о наличии физического устройства), то появление каталога /sys/block/sda зависит ещё и от наличия в памяти необходимых драйверов (usb-storage, sd_mod и т. д. — включая все драйверы, необходимые для поддержки usb).

class/ 
отражает группировку устройств в классы. Всякое подключенное устройство создаст новый подкаталог в дереве /sys/class. Как и в предыдущем случае, подразумевается наличие и устройства, и его драйвера.

3) procfs — специальная файловая система, используемая в UNIX-подобных операционных системах. Позволяет получить доступ к информации из ядра о системных процессах. Необходима для выполнения таких команд как ps, w, top. Монтируется в директорию /proc
В корне содержатся файлы (в основном, текстовые) и каталоги, предоставляющие самые разнообразные сведения о системе.
Интерфейс отправки команд отсутствует, файловая система лишь предоставляет подробную информацию о процессах (и кое-где позволяет изменить некоторые опции, например, /proc/<pid>/oom_adj)

4) udevadm - утилита для отображения информации об устройствах.
Опции: 
info - получение информации из БД
trigger - запросить события для устройства
settle - дождаться завершения обработки
control - управление демоном
monitor - следить за событиями
test - симулировать запуск события (покажет все события которые мы можем увидет по конкретному устройству)

5) Утилиты управления модулями ядра
lsmod - информация о модулях ядра
modinfo - информация о конкретном модуле
rmmod - удаление модуля ядра
insmod - установка модуля ядра
modprobe - деликатное удаление или добавление модулей

6) Процесс загрузки системы с OS Linux.
BIOS/UEFI------>MBR/GPT------>LILO(до 2015)/GRUB------>Linux Kernel------->init(пользовательская среда

7)Самые популярные системы инициализаци OS Linux.
1. init в стиле System V или SysV
Основные возможности SysV:

Написание файлов запуска служб на bash
Последовательный запуск служб
Сортировка порядка запуска с помощью номеров в именах файлов
Команды для запуска, остановки и проверки состояния служб.

2. init в стиле SYSTEMD
Основные возможности:

Понятный, простой и эффективный дизайн
Параллельная загрузка служб на основе зависимостей
Поддерживается завершение дополнительных процессов
Поддерживается собственный журнал с помощью journald
Поддерживается планирование заданий с помощью таймеров Systemd
Поддерживается управление сетью с помощью networkd
Для управления DNS используется systemd-resolved
Хранение журналов в бинарных файлах
Сохранение состояния сервисов linux systemd для возможного восстановления
Улучшенная интеграция с Gnome
Запуск сервисов по требованию

3. init в стиле UPSTART
Основные возможности:

Изначально разработанная для Ubuntu, но может использоваться и в других дистрибутивах
Запуск и остановка служб на основе событий
Генерация событий во время запуска и остановки служб
События могут быть отправлены обычными процессами
Связь с процессом инициализации через DBus
Пользователи могут запускать и останавливать свои процессы
Перезапуск служб, которые неожиданно завершились
Параллельная загрузка сервисов
Автоматический перезапуск служб

