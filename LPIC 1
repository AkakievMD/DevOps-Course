1) udev - менеджер устройств используймый в OS Linux с ноябрь 2003 года, позволяет выполнять различные действия по отношению к устройствам подключенным к Linux OS.
Взаимодействия с устройствами происходит за счет написаных файлов правил с расширением name-dev.rules, чтобы написанное в файле правило было применено необходимо создать или переместить файл в директорию /etc/udev/rules.d/, после чего перезагрузить OS при необходимости.
Пример: SUBSYSTEM=="net", ATTR{address}=="00:0c:29:69:b3:eb", NAME="eth0"  (Переименовываем сетевой интерфейс), KERNEL=="sdb", RUN+="/usr/bin/my_script" (правило отрабатывает скрипт при подключении носителя)

2) sysfs — виртуальная файловая система в операционной системе Linux. Экспортирует в пространство пользователя информацию ядра Linux о присутствующих в системе устройствах и драйверах. Монтируется в директорию /sys

devices/
полностью соответствует внутреннему дереву устройств ядра, а символические ссылки в подкаталогах (когда они есть) указывают на шину устройства, принадлежность его к определённому классу, соответствующий загруженный драйвер. Дерево отражает связь между устройствами.

bus/ 
представляет собой перечень шин, зарегистрированных в ядре. Каталог каждой шины содержит подкаталоги devices/ и drivers/. devices/ — это символьные ссылки на каталоги всех устройств, описанных в системе (реально расположенных в /sys/devices/…).

drivers/
каталоги драйверов, загруженных для устройств, присутствующих на данной шине. Каждый такой каталог содержит, как минимум, пару файлов-атрибутов bind и unbind, предназначенных для управления драйвером, а когда драйвер обнаруживает «своё» устройство, то в каталоге появляется символьная ссылка на каталог этого устройства.

block/
содержит каталоги всех блочных устройств, присутствующих в настоящее время в системе. В данном случае под устройством понимается совокупность физического устройства и драйвера. То есть, если при подключении USB-драйва некоторое новое устройство в /sys/devices/ появится всегда (можно говорить о наличии физического устройства), то появление каталога /sys/block/sda зависит ещё и от наличия в памяти необходимых драйверов (usb-storage, sd_mod и т. д. — включая все драйверы, необходимые для поддержки usb).

class/ 
отражает группировку устройств в классы. Всякое подключенное устройство создаст новый подкаталог в дереве /sys/class. Как и в предыдущем случае, подразумевается наличие и устройства, и его драйвера.

3) procfs — специальная файловая система, используемая в UNIX-подобных операционных системах. Позволяет получить доступ к информации из ядра о системных процессах. Необходима для выполнения таких команд как ps, w, top. Монтируется в директорию /proc
В корне содержатся файлы (в основном, текстовые) и каталоги, предоставляющие самые разнообразные сведения о системе.
Интерфейс отправки команд отсутствует, файловая система лишь предоставляет подробную информацию о процессах (и кое-где позволяет изменить некоторые опции, например, /proc/<pid>/oom_adj)

4) udevadm - утилита для отображения информации об устройствах.
Опции: 
info - получение информации из БД
trigger - запросить события для устройства
settle - дождаться завершения обработки
control - управление демоном
monitor - следить за событиями
test - симулировать запуск события (покажет все события которые мы можем увидет по конкретному устройству)

5) Утилиты управления модулями ядра
lsmod - информация о модулях ядра
modinfo - информация о конкретном модуле
rmmod - удаление модуля ядра
insmod - установка модуля ядра
modprobe - деликатное удаление или добавление модулей

6) Процесс загрузки системы с OS Linux.
BIOS/UEFI------>MBR/GPT------>LILO(до 2015)/GRUB------>Linux Kernel------->init(пользовательская среда

7)Самые популярные системы инициализаци OS Linux.
1. init в стиле System V или SysV
Основные возможности SysV:

Написание файлов запуска служб на bash
Последовательный запуск служб
Сортировка порядка запуска с помощью номеров в именах файлов
Команды для запуска, остановки и проверки состояния служб.

2. init в стиле SYSTEMD
Основные возможности:

Понятный, простой и эффективный дизайн
Параллельная загрузка служб на основе зависимостей
Поддерживается завершение дополнительных процессов
Поддерживается собственный журнал с помощью journald
Поддерживается планирование заданий с помощью таймеров Systemd
Поддерживается управление сетью с помощью networkd
Для управления DNS используется systemd-resolved
Хранение журналов в бинарных файлах
Сохранение состояния сервисов linux systemd для возможного восстановления
Улучшенная интеграция с Gnome
Запуск сервисов по требованию

3. init в стиле UPSTART
Основные возможности:

Изначально разработанная для Ubuntu, но может использоваться и в других дистрибутивах
Запуск и остановка служб на основе событий
Генерация событий во время запуска и остановки служб
События могут быть отправлены обычными процессами
Связь с процессом инициализации через DBus
Пользователи могут запускать и останавливать свои процессы
Перезапуск служб, которые неожиданно завершились
Параллельная загрузка сервисов
Автоматический перезапуск служб

8) Этапы инициализации в режиме SysV, SYSTEMD, UPSTART
Инициализация в режиме SysV.

Runlevel 0 — завершает работу системы.
Runlevel 1 — однопользовательский режим работы. Чаще всего используется в целях обслуживания и выполнения других административных задач. Этот уровень также может называться Runlevel S.
Runlevel 2 — многопользовательский режим работы без поддержки сетевых служб.
Runlevel 3 — многопользовательский режим с поддержкой сети, но без графического интерфейса.
Runlevel 4 — не используется. Пользователь может настраивать этот уровень исходя из его целей.
Runlevel 5 — схож с режимом 3, но здесь запускается графический интерфейс. В этом режиме работают десктопные версии Linux.
Runlevel 6 — перезагружает систему.
Путь к конфигурационному файлу родительского процесса: /etc/inittab
Какждый уровень загрузки запускается с определенным набором скриптов, скрипты размещены по пути: /etc/rc.d/rc 0 - rc 6/
При режиме инициализации в SysV все скрипты служб и демонов которые запускались при загрузке OS находились по пути: /etc/init.d/
Основные команды:
init - управление инициализацией
Telinit - управление процессом init
Wall - вывод сообщения пользователям системы
Hall - выключение ПК
Reboot - перезагрузка ПК
Shutdown - запланированное выключение
Service service_name start | stop | reload | restart

Инициализация в режиме SYSTEMD.

Unit - модули, модули которыми оперирует systemd:
.service - службы
.mount - точки монтирования
.device - устройства
.socet - сокеты
и т.д.
/usr/lib/systemd -директория с юнитами по умолчанию
/etc/systemd - директория с управляемыми юнитами
/usr/lib/systemd/system - по этому пути расположены файлы .service, .mount, .device, .socet, .path и т.д.
/etc/systemd - файлы расположенные в этой директории пришли на замену файлу по пути /etc/inittab, теперь файле inittab содержится сообщение что он ни за что не овечает и теперь все настройки храняться в /etc/systemd.
systemctl list-units - выводит список активных юнитов
systemctl --failed - юниты которые не запустились
systemctl list-units --type=(после равно нужно указать тип юнитов)
Runlevel          Target              Описание
0                 poweroff.target     Выключение
1                 rescue.target       Однопользовательский
2,4               multi-user.target   Настраиваемые режимы
3                 multi-user.target   Многопользовательский
5                 graphical.target    Графика
6                 reboot.target       Перезагрузка
systemctl list-units -type=target     -узнать запущенные таргеты
systemctl isolate name.target         -переключится на другой
systemctl set-default -f name.target  -установить по умолчанию
journald - сдужба журналирования
systemctl reboot | poweroff | suspend | hibernate | hybrid-sleep
systemctl start | stop | reload | restart | status "unit"
Дописать плюсы systemd

Инициализация в режиме UPSTART.

services и tasks - то, чем оперирует upstart
/etc/init - каталог файлов-заданий (jobs)
initctl - утилита управления upstart
service в отличие task перезапускается в случае аварийного завершения, task не перезапускается
ufw - firewall UPSTART
/etc/init/rc-sysinit.conf - файл конфигурации для изменения runlevel
UPSTART обратно совместим с SysV

9) Работа с жесткими дисками и файловой системой
fdisk - утилита разбиения жесткого диска
mkfs - утилита создания файловой системы
swapon и swapoff - команды работы с разделом подкачки
/etc/fstab - конфигурационный файл, отвечающий за монтирование файловых систем
mkswap - утилита создания раздела или файла подкачки
LVM - Linux Volume Manager
pvdisplay - показать физические volumes
vgdisplay - паказать группу volumes
vgcreate - создание volume группы
lvcreate - создание логических томов
Отдельно проработать эту тему

10) Управление пакета в Red Hat системах
rpm - утилита управления пакетами в Red Hat системах
rpm2cpio - разбор паета на двоичные файлы
yum - программа работы с пакетами программ в Red Hat системах
/etc/yum.repos.d/ - перечень репозиториев

11) Работа в командной строке
Оболочки:
The Bourne shell - /bin/sh
The Bourne again shell - /bin/bash
The Korn shell - /bin/ksh
The C shell - /bin/csh
Tom`s C shell - /bin/tcsh
Файл в котором можно посмотреть какая оболочка используется пользователем - /etc/passwd
env - выводит переменные среды, среди которых есть переменная в которой указана оболочка по умолчанию (SHELL=/bin/bash)

Основные команды:
cat- вывод содержимого файла в консоль
cd - переход в каталог
ls - вывод содержимого каталога
echo - вывод текста в консоль 
touch - обновление времени редактирования файла/создание файла
file - справка по файлу
whatis - справка по названию
history - вывод истории команд
env - вывод переменных среды
pwd - текущий каталог 
export - задание переменной
unset - отключение переменной

12) Работа с текстовым потоком
cat - изучить подробное использование утилиты
cut - изучить подробное использование утилиты
fmt - изучить подробное использование утилиты
od - изучить подробное использование утилиты
join - изучить подробное использование утилиты
nl - изучить подробное использование утилиты
paste - изучить подробное использование утилиты
pr - изучить подробное использование утилиты
sed - изучить подробное использование утилиты
sort - изучить подробное использование утилиты
split - изучить подробное использование утилиты
tail  - изучить подробное использование утилиты
unexpand - изучить подробное использование утилиты
uniq - изучить подробное использование утилиты
wc - изучить подробное использование утилиты

13) Операции с файлами и папками
Основные команды:
cp
find
mkdir
mv
ls
rm
rmdir
touch
tar
cpio
dd
file
gzip
gunzip
bzip2
xz
file globbing

14) Потоки, конвейры, перенаправления
stdin  (0) - ввод
stdout (1) - вывод
stdeer (2) - вывод ошибки

> - передать в
>> - дописать в
< - взять из
| - отправить следующей команде

tee - отправить в файл на стандартный вывод
xargs - построчно передавать на ввод команде

15) Работа с процессами
fg (foreground) и bg (background)
nohup (no hang up)

ps - информация об активных процессах
pstree - дерево процессов
pgrep - поиск процессов
pkill - завершение процессов
top - диспетчер задач
free - загрузка оперативной памяти
uptime - время и полнота загрузки
screen - управление сессиями

Приоритеты процессов в Linux
Приоритеты: от -20 до +19
Nice и Renice

16) Регулярные выражения в Linux
Основные символы:
\<text - слова начинающиеся с text
text\> - слова заканчивающиеся с text
^ - начало строки
$ - конец строки
[a-z] - диапозон от a до z
[^t] - не буква t
\[ - воспринять символ [ буквально
. - любой символ
a|z - a или z

grep - утилита поиска
egrep - расширенный grep
fgrep - быстрый grep
rgrep - рекурсивный grep
sed - потоковый текстовый редактор

17) Создание и форматирование разделов жестких дисков в Linux
Основные утилиты:
fdisk
gdisk
parted
gparted
mkfs
mkswap

18) Проверка файловой системы
Общие утилиты:
df
du
fsck
debugfs

Для файловой системы ext
mke2fs
e2fsck
dumpe2fs
tune2fs

Для файловой системы xfs
xfs_check
xfs_repair
xfs_info
xfs_metadump

19) Монтирование и демонтирование файловых систем
mount устройство точка_монтирования
umount устройство
umount точка_монтирования

/etc/fstab - монтирование при загрузке системы
устройство точка_монтирования
тип_файловой_системы параметры dump pass

20) Управление квотами дисков
quotaon - включение квоты
quotaoff - отключение квоты
edquota - редактирование квоты
repquota - отчеты по квотам

21) Владельцы файлов и папок 
chown - установка владельца
chgrp - установка группы владельцев
chmod - установка прав доступа

22) Маска создания файлов и папок
umask - маска создания файлов и папок
suid - бит запуска от имени владельца
sgid - бит запуска от имени группы владельцев
sticky - бит защиты содержимого

Пример: установки битов
chmod u+s script - установка suid
chmod g+s script - установка sgid
chmod o+t script - установка sticky

23) Мягкие и жесткае ссылки
Жесткаие ссылки ссылаются на inode и вес ее такой же как и у исходного файла или папки, если сменить имя исходного файла-то ссылка будет работать
Мягкая ссылка ссылается на имя файла и имеет меньший вес и другой inode, если переименовать исходный файл-то ссылка работать не будет

24) Поиск и расположение команд и файлов в Linux
grep - утилита поиска по содержимому
find - утилита поиска файлов по свойствам
locate - быстрый поиск файлов
which - поиск команды
type - вывод точной команды
whereis - поиск команды, исходники и мануалы

25) Bash
1. Профили пользователя которые используются при инициализации командной оболочки

/etc/profile ------> /etc/bash.bashrc
                     /etc/bashrc
                     
/etc/profile -----? /etc/profile.d/ --------> ~/.bash_profile
                                              ~/.bash_login
                                              ~/.profile --------> ~/.bashrc
                                              
2. Псевдонимы и функции

Файлы RC: псевдонимы и функции
Псевдонимы (alias) - текст для вызова команды с ключами
Пример: la = 'ls -A'

Функция - текст для вызова скрипта из нескольких команд

3. Профили: Переменные и настройки

Переменные - работают в пределах текущей оболочки
Переменные среды - работают так же во всех дочерних процессах

Команды:
set - вывод всех переменных и функций
unset - удаление переменных 
export - превращает переменную в переменную среды
env - выводит переменные среды

4. Синтаксис и команды
#!: shebang
#!/bin/bash - начало любого bash-скрипта
# - строка закоментирована

5. Утилита test
-x Исполняемый файл
-e файл существует
-eq значения равны
-ne значения не равны
-z существует ли значение

На выходе дает значение переменной $?
0 - если результат положительный
не 0 - если результат отрицательный

6. Условные выражения
if [условие]
then
 набор команд
else
 набор команд
fi

Подстановка команд:
Работают по принципу функций
Результат команды является аршументом или значением переменной
X = $(ls -a)  или X = 'ls -a'






