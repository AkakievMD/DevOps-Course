Инструкции Docker:

FROM — задаёт базовый (родительский) образ.
LABEL — описывает метаданные. Например — сведения о том, кто создал и поддерживает образ.
ENV — устанавливает постоянные переменные среды.
RUN — выполняет команду и создаёт слой образа. Используется для установки в контейнер пакетов.
COPY — копирует в контейнер файлы и папки.
ADD — копирует файлы и папки в контейнер, может распаковывать локальные .tar-файлы.
CMD — описывает команду с аргументами, которую нужно выполнить когда контейнер будет запущен. Аргументы могут быть переопределены при запуске контейнера. В файле может присутствовать лишь одна инструкция CMD.
WORKDIR — задаёт рабочую директорию для следующей инструкции.
ARG — задаёт переменные для передачи Docker во время сборки образа.
ENTRYPOINT — предоставляет команду с аргументами для вызова во время выполнения контейнера. Аргументы не переопределяются или чтобы указать, какой исполняемый файл должен запускаться при запуске контейнера из образа докера.
EXPOSE — указывает на необходимость открыть порт.
VOLUME — создаёт точку монтирования для работы с постоянным хранилищем.
USER — В USER наборы инструкций выполняют имя пользователя (или UID) и, необязательно, группу пользователей (или GID) для использования при выполнении изображений и для любых инструкций RUN, CMD и ENTRYPOINT, которые следуют его в Dockerfile.
ONBUILD — Эта ONBUILD инструкция добавляет к образу триггерную инструкцию, которая будет выполняться позднее, когда образ будет использоваться в качестве основы для другой сборки. Триггер будет выполняться в контексте нижестоящей сборки, как если бы он был вставлен сразу после FROM инструкции в нижестоящем Dockerfile.
STOPSIGNAL — STOPSIGNALИнструкция устанавливает сигнал системного вызова , который будет отправлен в контейнер для выхода. Этот сигнал может быть именем сигнала в формате SIG<NAME>, например SIGKILL, или беззнаковым числом, которое соответствует позиции в таблице системных вызовов ядра, например 9. По умолчанию, SIGTERM если не определено.
HEALTHCHECK — HEALTHCHECK Инструкция говорит докер как проверить контейнер , чтобы проверить , что он все еще работает. Это может обнаружить такие случаи, как веб-сервер, который застрял в бесконечном цикле и не может обрабатывать новые подключения, даже если серверный процесс все еще работает.
SHELL — SHELL Инструкция позволяет оболочку по умолчанию , используемой для оболочки формы команд быть переопределена. Оболочкой по умолчанию в Linux является ["/bin/sh", "-c"], а в Windows — ["cmd", "/S", "/C"]. SHELLИнструкция должна быть написана в виде JSON в Dockerfile.

Пример сборки образа для ASP.NET C# приложения:

FROM mcr.microsoft.com/dotnet/aspnet:5.0-buster-slim AS base
WORKDIR /app
EXPOSE 80
EXPOSE 443
 
FROM mcr.microsoft.com/dotnet/sdk:5.0-buster-slim AS build
WORKDIR /src
COPY ["project_name.csproj", ""]
RUN dotnet restore "./project_name.csproj"
COPY . .
WORKDIR "/src/."
RUN dotnet build "project_name.csproj" -c Release -o /app/build
 
FROM build AS publish
RUN dotnet publish "project_name.csproj" -c Release -o /app/publish
 
FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "project_name.dll"]

Докер команды:

docker ps (смотрим список запущенных контейнеров, с ключом -q — «тихий» режим, в котором команда выводит только id контейнеров, -a — показывает все контейнеры, а не только запущенные)
docker ps --filter status=exited --all -q (выводит контейнеры статус которых "вышедший" по id контейнера, доступные значения created, restarting, running, removing, paused, exited, dead) 
docker rm $(docker ps --filter status=exited --all -q) (удаляет вывод контейнеров статус которых "вышедший" по id контейнера)
docker pull (далее укзываем image или если это частное защищенное хранилище то к примеру artifactory.island.tech/boos.solution/NameSevice:tag) 
docker tag artifactory.island.tech/boos.solution/NameSevice:tag <-----(здесь то как у вас локально назван image влючая репозиторий где хранится и tag) ------> artifactory.island.tech/boos.solution/NameSevice:tag (Здесь как хотите назвать через пробел)
docker images ls (покажет список всех образов, хранящихся на машине) 
docker push (далее укзываем image или если это частное защищенное хранилище то к примеру artifactory.akbars.ru/boos.solution/NameSevice:tag)
docker inspect NameImage (Docker inspect отображает низкоуровневую информацию о конкретном объекте Docker) docker build . (собрать dockerfile в текущей директории)
docker image ls -q | xargs -I {} docker image rm -f {} (удалить все имеджи)
docker stats (посмотреть потребление контейнерами памяти, процесора хоста и посмотреть нагрузку на сеть)
docker logs NameImage (посмотреть логи контейнера) docker logs NameImage -f (смотреть в реальном времени)
docker login (авторизоваться в защищенном хранилище)
docker logout (разлогинить)
docker exec -it "container id" bash или /bin/sh (попасть внутрь контейнера)
docker exec -it "container id" env (посмотреть переменные контейнера)
