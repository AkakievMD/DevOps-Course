Инструкции Docker:

FROM — задаёт базовый (родительский) образ.
LABEL — описывает метаданные. Например — сведения о том, кто создал и поддерживает образ.
ENV — устанавливает постоянные переменные среды.
RUN — выполняет команду и создаёт слой образа. Используется для установки в контейнер пакетов.
COPY — копирует в контейнер файлы и папки.
ADD — копирует файлы и папки в контейнер, может распаковывать локальные .tar-файлы.
CMD — описывает команду с аргументами, которую нужно выполнить когда контейнер будет запущен. Аргументы могут быть переопределены при запуске контейнера. В файле может присутствовать лишь одна инструкция CMD.
WORKDIR — задаёт рабочую директорию для следующей инструкции.
ARG — задаёт переменные для передачи Docker во время сборки образа.
ENTRYPOINT — предоставляет команду с аргументами для вызова во время выполнения контейнера. Аргументы не переопределяются или чтобы указать, какой исполняемый файл должен запускаться при запуске контейнера из образа докера.
EXPOSE — указывает на необходимость открыть порт.
VOLUME — создаёт точку монтирования для работы с постоянным хранилищем.
USER — В USER наборы инструкций выполняют имя пользователя (или UID) и, необязательно, группу пользователей (или GID) для использования при выполнении изображений и для любых инструкций RUN, CMD и ENTRYPOINT, которые следуют его в Dockerfile.
ONBUILD — Эта ONBUILD инструкция добавляет к образу триггерную инструкцию, которая будет выполняться позднее, когда образ будет использоваться в качестве основы для другой сборки. Триггер будет выполняться в контексте нижестоящей сборки, как если бы он был вставлен сразу после FROM инструкции в нижестоящем Dockerfile.
STOPSIGNAL — STOPSIGNALИнструкция устанавливает сигнал системного вызова , который будет отправлен в контейнер для выхода. Этот сигнал может быть именем сигнала в формате SIG<NAME>, например SIGKILL, или беззнаковым числом, которое соответствует позиции в таблице системных вызовов ядра, например 9. По умолчанию, SIGTERM если не определено.
HEALTHCHECK — HEALTHCHECK Инструкция говорит докер как проверить контейнер , чтобы проверить , что он все еще работает. Это может обнаружить такие случаи, как веб-сервер, который застрял в бесконечном цикле и не может обрабатывать новые подключения, даже если серверный процесс все еще работает.
SHELL — SHELL Инструкция позволяет оболочку по умолчанию , используемой для оболочки формы команд быть переопределена. Оболочкой по умолчанию в Linux является ["/bin/sh", "-c"], а в Windows — ["cmd", "/S", "/C"]. SHELLИнструкция должна быть написана в виде JSON в Dockerfile.

Пример сборки образа для ASP.NET C# приложения:

------------------------------------------------------------------------------------------------------------

ARG artifactory_url="artifactory.island.tech"
ARG docker_registry="artifactory.island.tech/docker/"
ARG docker_tag="6.0"
  
### Build service
FROM ${docker_registry}dotnet/sdk:${docker_tag} as builder
# Set arguments
ARG project_name="factoring"
ARG service_path="./src/"
ARG service_name="Abdt.Factoring.Orchestrator"
ARG service_prefix=".Web"
ARG csproj="/${service_name}${service_prefix}.csproj"
ARG artifactory_url="artifactory.island.tech"
ARG artifactory_url_nuget_virtual="https://artifactory.island.tech/artifactory/api/nuget/nuget"
ARG artifactory_url_nuget_virtual_v3="https://artifactory.island.tech/artifactory/api/nuget/v3/nuget"
ARG artifactory_url_nuget_local="https://artifactory.island.tech/artifactory/api/nuget/${project_name}-nuget-local"
ARG artifactory_login
ARG artifactory_password
 
WORKDIR /app
# Copy and restore project
COPY ./ /app
ARG ASPNETCORE_ENVIRONMENT=Production
RUN dotnet nuget add  source ${artifactory_url_nuget_virtual} --name island.tech --username ${artifactory_login} --password ${artifactory_password} --store-password-in-clear-text && \
    dotnet nuget add source ${artifactory_url_nuget_virtual_v3} --name island.tech.v3 --username ${artifactory_login} --password ${artifactory_password} --store-password-in-clear-text && \
    sed -i 's#<add key="nuget.org" value="https://api.nuget.org/v3/index.json" protocolVersion="3" />##g' /root/.nuget/NuGet/NuGet.Config

# Add Instana
#RUN dotnet add ${service_path}${service_name}${service_prefix} package Instana.Tracing.Core --source ${artifactory_url_nuget_virtual} --version 1.214.3 && \
#    dotnet add ${service_path}${service_name}${service_prefix} package Instana.Tracing.Core.Rewriter.Linux --source ${artifactory_url_nuget_virtual} --version 1.214.3

# If Migrator exist
RUN [ -d "${service_name}.Migrator" ] && \
    dotnet restore ${service_path}${service_name}.Migrator  --ignore-failed-sources --force && \
    dotnet publish ${service_path}${service_name}.Migrator -c Release -o /app/publish/ -r centos.7-x64 --no-self-contained \
    || echo "Migrator does not exists."

# Copy full project and build
RUN [ -d "${service_path}${service_name}${service_prefix}" ] && \
    dotnet restore ${service_path}${service_name}${service_prefix} --ignore-failed-sources --force && \
    dotnet publish ${service_path}${service_name}${service_prefix}${csproj} -c Release -o /app/publish/ -r centos.7-x64 --no-self-contained \
    || echo "Error: service not found" || exit 1

# Build runtime/aspnet image
FROM ${docker_registry}dotnet/aspnet:6.0-abdt as base
# Set arguments

#ARG Beta
ARG ASPNETCORE_ENVIRONMENT
ARG artifactory_url="artifactory.island.tech"
ARG service_port="5000"
# Create label
LABEL digital.island.vendor=Ak\ Bars\ Digital\ Technologies \
#     digital.akislandbars.is-beta=${Beta} \
      digital.island.is-production=${ASPNETCORE_ENVIRONMENT} \
      digital.island.version=${BUILD_VERSION} \
      digital.island.release-date=${BUILD_DATE}


# Prepare if need some install
#RUN sed -i "s#http://deb.debian.org/debian#https://artifactory.island.tech/artifactory/debian-remote#g" /etc/apt/sources.list && \
#    sed -i "s#http://security.debian.org/debian-security#https://artifactory.island.tech/artifactory/debian-security#g" /etc/apt/sources.list
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Europe/Moscow
ARG BUILD_DATE
ARG BUILD_VERSION
ARG TEAMCITY_PROJECT_NAME

# Copy builded service
WORKDIR /app
COPY --from=builder /app/publish .
 
#Instana
#ENV DOTNET_STARTUP_HOOKS=/app/Instana.Tracing.Core.dll
#ENV CORECLR_ENABLE_PROFILING=1
#ENV CORECLR_PROFILER={cf0d821e-299b-5307-a3d8-b283c03916dd}
#ENV CORECLR_PROFILER_PATH=/app/instana_tracing/CoreProfiler.so

# Set build information
ENV BUILD_DATE ${BUILD_DATE}
ENV BUILD_VERSION ${BUILD_VERSION}
ENV TEAMCITY_PROJECT_NAME ${TEAMCITY_PROJECT_NAME}
ENV ASPNETCORE_ENVIRONMENT ${ASPNETCORE_ENVIRONMENT}

# Set ports
ENV ASPNETCORE_URLS http://0.0.0.0:${service_port}
EXPOSE ${service_port}


ENTRYPOINT ["dotnet", "/app/Abdt.Factoring.Orchestrator.Web.dll"]

-------------------------------------------------------------------------------------------------------------

Докер команды:

docker ps (смотрим список запущенных контейнеров, с ключом -q — «тихий» режим, в котором команда выводит только id контейнеров, -a — показывает все контейнеры, а не только запущенные)
docker container ls (тоже самое что и docker ps)
docker ps --filter status=exited --all -q (выводит контейнеры статус которых "вышедший" по id контейнера, доступные значения created, restarting, running, removing, paused, exited, dead) 
docker rm $(docker ps --filter status=exited --all -q) (удаляет вывод контейнеров статус которых "вышедший" по id контейнера)
docker pull (далее укзываем image или если это частное защищенное хранилище то к примеру artifactory.island.tech/boos.solution/NameSevice:tag) 
docker tag artifactory.island.tech/boos.solution/NameSevice:tag <-----(здесь то как у вас локально назван image влючая репозиторий где хранится и tag) ------> artifactory.island.tech/boos.solution/NameSevice:tag (Здесь как хотите назвать через пробел)
docker images ls (покажет список всех образов, хранящихся на машине) 
docker push (далее укзываем image или если это частное защищенное хранилище то к примеру artifactory.island.ru/boos.solution/NameSevice:tag)
docker inspect NameImage (Docker inspect отображает низкоуровневую информацию о конкретном объекте Docker) docker build . (собрать dockerfile в текущей директории)
docker image ls -q | xargs -I {} docker image rm -f {} (удалить все имеджи)
docker stats (посмотреть потребление контейнерами памяти, процесора хоста и посмотреть нагрузку на сеть)
docker logs NameImage (посмотреть логи контейнера) docker logs NameImage -f (смотреть в реальном времени)
docker login (авторизоваться в защищенном хранилище)
docker logout (разлогинить)
docker exec -it "container id" bash или /bin/sh (попасть внутрь контейнера)
docker exec -it "container id" env (посмотреть переменные контейнера)
docker network create --driver overlay "NameNetwork"
-------------------------------------------------------------------------------------------------

							Docker Swarm

docker service ls (посмотреть список сервисов)
docker node ls (посмотреть подключенные к кластеру узлы)
docker service inspect "NameService" (Посмотреть спецификацию сервиса)
docker service update "NameService" (ребутает сервис после успешного ответа от swarm)
docker service update "NameService" --force (ребутает сервис недожидаясь нормального ответа от swarm)
docker service logs "NameService" (посмотреть логи сервиса)  
docker service logs "NameService" -f (посмотреть логи сервиса в реальном времени)
docker promote "NameHost"
docker stack deploy --compose-file "example.yml" "NameStack"
docker swarm leave или docker swarm leave --force (исключить узел из кластера swarm)
docker swarm init (инициализация кластера Swarm)
docker swarm join --token "токен" "адрес и порт manager"
